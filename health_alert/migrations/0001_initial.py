# Generated by Django 5.1.2 on 2024-11-07 15:54

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='EmployeeHealthReference',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_update', models.DateField(auto_now=True, help_text='Дата диспансеризации и проведения контрольных замеров', verbose_name='Дата контрольного замера')),
                ('blood_group', models.PositiveSmallIntegerField(verbose_name='Группа крови')),
                ('rhesus_factor', models.BooleanField(verbose_name='Резус-фактор')),
                ('normal_systolic_pressure', models.DecimalField(decimal_places=4, max_digits=7, verbose_name='Эталонное систолическое давление')),
                ('normal_diastolic_pressure', models.DecimalField(decimal_places=4, max_digits=7, verbose_name='Эталонное диастолическое давление')),
                ('normal_pulse', models.DecimalField(decimal_places=4, max_digits=7, verbose_name='Эталонный пульс')),
                ('normal_temperature', models.DecimalField(decimal_places=4, max_digits=6, verbose_name='Эталонная температура')),
                ('normal_steps', models.IntegerField(verbose_name='Эталонное количество шагов')),
                ('normal_stress_level', models.DecimalField(decimal_places=4, max_digits=7, verbose_name='Эталонный уровень стресса')),
                ('normal_oxygen_level', models.DecimalField(decimal_places=4, max_digits=7, verbose_name='Эталонный уровень кислорода в крови')),
            ],
            options={
                'verbose_name': 'Эталонное значение показателей здоровья',
                'verbose_name_plural': 'Эталонные значения показателей здоровья',
            },
        ),
        migrations.CreateModel(
            name='HealthMeasurements',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_update', models.DateTimeField(auto_now=True, help_text='Дата и время последнего замера умными носимыми устройствами', verbose_name='Дата и время последнего замера')),
                ('systolic_pressure', models.DecimalField(decimal_places=4, max_digits=7, verbose_name='Систолическое давление')),
                ('diastolic_pressure', models.DecimalField(decimal_places=4, max_digits=7, verbose_name='Диастолическое давление')),
                ('pulse', models.DecimalField(decimal_places=4, max_digits=7, verbose_name='Пульс')),
                ('temperature', models.DecimalField(decimal_places=4, max_digits=6, verbose_name='Температура')),
                ('steps', models.IntegerField(verbose_name='Количество шагов')),
                ('stress_level', models.DecimalField(decimal_places=4, max_digits=7, verbose_name='Уровень стресса')),
                ('oxygen_level', models.DecimalField(decimal_places=4, max_digits=7, verbose_name='Уровень кислорода в крови')),
                ('latitude', models.DecimalField(decimal_places=6, max_digits=9, verbose_name='Широта')),
                ('longitude', models.DecimalField(decimal_places=6, max_digits=9, verbose_name='Долгота')),
            ],
            options={
                'verbose_name': 'Последний замер показателей здоровья',
                'verbose_name_plural': 'Последние замеры показателей здоровья',
            },
        ),
        migrations.CreateModel(
            name='Employee',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('last_name', models.CharField(max_length=150, verbose_name='Фамилия')),
                ('first_name', models.CharField(max_length=150, verbose_name='Имя')),
                ('middle_name', models.CharField(max_length=150, verbose_name='Отчество')),
                ('birth_date', models.DateField(verbose_name='Дата рождения')),
                ('gender', models.CharField(choices=[('MALE', 'Мужской'), ('FEMALE', 'Женский')], max_length=10, verbose_name='Пол')),
                ('phone_number', models.CharField(max_length=20, verbose_name='Номер телефона')),
                ('position', models.CharField(max_length=150, verbose_name='Должность')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
                ('health_reference', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='health_alert.employeehealthreference', verbose_name='Нормативы здоровья')),
                ('health_measurement', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='health_alert.healthmeasurements', verbose_name='Показатели здоровья')),
            ],
            options={
                'verbose_name': 'Сотрудник',
                'verbose_name_plural': 'Сотрудники',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
